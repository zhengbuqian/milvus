version: 1
# Demonstrates various multi-field query patterns with field name placeholders

data_configs:
  - path: data_configs/ecommerce_clicks.yaml

index_configs:
  - name: no_index
    field_configs: {}

  - name: selective_index
    field_configs:
      user_id:
        type: BITMAP
      price:
        type: STL_SORT
        params: {}
      category:
        type: INVERTED
        params: {}

expr_templates:
  # Single field equality
  - name: user_id_exact_match
    type: EQUALITY
    expr_template: |
      output_field_ids: {field_id:user_id}
      query {
        predicates {
          unary_range_expr {
            column_info {
              field_id: {field_id:user_id}
              data_type: VarChar
            }
            op: Equal
            value { string_val: "user_12345" }
          }
        }
      }

  # Numeric range on price
  - name: price_budget_range
    type: RANGE
    expr_template: |
      output_field_ids: {field_id:price}
      query {
        predicates {
          binary_range_expr {
            column_info {
              field_id: {field_id:price}
              data_type: Double
            }
            lower_inclusive: true
            upper_inclusive: true
            lower_value { double_val: 50.0 }
            upper_value { double_val: 200.0 }
          }
        }
      }

  # Multi-field AND condition
  - name: user_and_price_filter
    type: COMPOUND_AND
    expr_template: |
      output_field_ids: {field_id:user_id}
      output_field_ids: {field_id:price}
      query {
        predicates {
          binary_expr {
            op: LogicalAnd
            left {
              unary_range_expr {
                column_info {
                  field_id: {field_id:user_id}
                  data_type: VarChar
                }
                op: Equal
                value { string_val: "premium_user" }
              }
            }
            right {
              binary_range_expr {
                column_info {
                  field_id: {field_id:price}
                  data_type: Double
                }
                lower_inclusive: true
                upper_inclusive: false
                lower_value { double_val: 100.0 }
                upper_value { double_val: 1000.0 }
              }
            }
          }
        }
      }

  # Complex nested query
  - name: complex_multi_condition
    type: COMPLEX
    expr_template: |
      output_field_ids: {field_id:user_id}
      output_field_ids: {field_id:price}
      output_field_ids: {field_id:category}
      query {
        predicates {
          binary_expr {
            op: LogicalAnd
            left {
              binary_expr {
                op: LogicalOr
                left {
                  unary_range_expr {
                    column_info {
                      field_id: {field_id:category}
                      data_type: VarChar
                    }
                    op: Equal
                    value { string_val: "electronics" }
                  }
                }
                right {
                  unary_range_expr {
                    column_info {
                      field_id: {field_id:category}
                      data_type: VarChar
                    }
                    op: Equal
                    value { string_val: "computers" }
                  }
                }
              }
            }
            right {
              binary_range_expr {
                column_info {
                  field_id: {field_id:price}
                  data_type: Double
                }
                lower_inclusive: true
                upper_inclusive: true
                lower_value { double_val: 500.0 }
                upper_value { double_val: 2000.0 }
              }
            }
          }
        }
      }

  # IN operator with multiple values
  - name: category_in_set
    type: SET_MEMBERSHIP
    expr_template: |
      output_field_ids: {field_id:category}
      query {
        predicates {
          term_expr {
            column_info {
              field_id: {field_id:category}
              data_type: VarChar
            }
            values { string_val: "electronics" }
            values { string_val: "computers" }
            values { string_val: "accessories" }
            values { string_val: "gaming" }
          }
        }
      }

  # NOT condition
  - name: exclude_category
    type: NEGATION
    expr_template: |
      output_field_ids: {field_id:category}
      query {
        predicates {
          unary_expr {
            op: Not
            child {
              unary_range_expr {
                column_info {
                  field_id: {field_id:category}
                  data_type: VarChar
                }
                op: Equal
                value { string_val: "discontinued" }
              }
            }
          }
        }
      }

  # Boolean field filter
  - name: active_items_only
    type: BOOLEAN
    expr_template: |
      output_field_ids: {field_id:is_active}
      query {
        predicates {
          unary_range_expr {
            column_info {
              field_id: {field_id:is_active}
              data_type: Bool
            }
            op: Equal
            value { bool_val: true }
          }
        }
      }

  # Combining boolean with other conditions
  - name: active_items_in_price_range
    type: COMPOUND_BOOL
    expr_template: |
      output_field_ids: {field_id:is_active}
      output_field_ids: {field_id:price}
      query {
        predicates {
          binary_expr {
            op: LogicalAnd
            left {
              unary_range_expr {
                column_info {
                  field_id: {field_id:is_active}
                  data_type: Bool
                }
                op: Equal
                value { bool_val: true }
              }
            }
            right {
              binary_range_expr {
                column_info {
                  field_id: {field_id:price}
                  data_type: Double
                }
                lower_inclusive: true
                upper_inclusive: true
                lower_value { double_val: 10.0 }
                upper_value { double_val: 100.0 }
              }
            }
          }
        }
      }

test_params:
  warmup_iterations: 5
  test_iterations: 50
  collect_memory_stats: false
  enable_flame_graph: false